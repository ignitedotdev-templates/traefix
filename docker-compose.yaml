version: "3.7"

services:
  dotnet:
    image: harbor.staging.ignite.dev/docker-images/ignitedotdev-templates/dotnet-docker:9494254926-5
    ports:
      - 6177:80
    depends_on:
      - traefik
  rust:
    image: harbor.staging.ignite.dev/docker-images/ignitedotdev-templates/rust-docker:9497244835-8
    ports:
      - 8081:8080
    depends_on:
      - traefik
  ruby:
    image: harbor.staging.ignite.dev/docker-images/ignitedotdev-templates/ruby-on-rails-docker:9491745603-5
    ports:
      - 3000:3000
    depends_on:
      - traefik
  laravel:
    image: harbor.staging.ignite.dev/docker-images/ignitedotdev-templates/docker-laravel:9495720880-4
    ports:
      - 8002:8000
    depends_on:
      - traefik
  django:
    image: harbor.staging.ignite.dev/docker-images/ignitedotdev-templates/django-docker:9497186675-4
    ports:
      - 8000:8000
    depends_on:
      - traefik
  flask:
    image: harbor.staging.ignite.dev/docker-images/ignitedotdev-templates/flask-docker:9497540256-4
    ports:
      - 5000:5000
    depends_on:
      - traefik
  nextjs:
    image: harbor.staging.ignite.dev/docker-images/ignitedotdev-templates/nextjs-docker:9491066171-4
    ports:
      - 3001:3000
    depends_on:
      - traefik
  springboot:
    image: harbor.staging.ignite.dev/docker-images/ignitedotdev-templates/springboot-docker:9543865002-1
    ports:
      - 8085:8080
    depends_on:
      - traefik
  nodejs:
    image: harbor.staging.ignite.dev/docker-images/ignitedotdev-templates/node-docker:9441426644-16
    ports:
      - 3002:3000
    depends_on:
      - traefik
  playframework:
    image: harbor.staging.ignite.dev/docker-images/ignitedotdev-templates/playframework-docker:9543820634-2
    ports:
      - 9000:9000
    depends_on:
      - traefik

  traefik:
    image: traefik:v2.6
    command:
      # Entrypoints configuration
      - --entrypoints.web.address=:80
      # Docker provider configuration
      - --providers.docker=true
      # Makes sure that services have to explicitly direct Traefik to expose them
      - --providers.docker.exposedbydefault=false
      # Use the secure docker socket proxy
      - --providers.docker.endpoint=tcp://socket_proxy:2375
      # Default docker network to use for connections to all containers
      - --providers.docker.network=traefik_public
      # Logging levels are DEBUG, PANIC, FATAL, ERROR, WARN, and INFO.
      - --log.level=info
      # insecure configuration
      - --api.insecure=true
    ports:
      - 80:80
      - 8080:8080
    networks:
      - traefik_public
      - socket_proxy
    restart: unless-stopped
    depends_on:
      - socket_proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # https://github.com/traefik/whoami
  whoami:
    image: traefik/whoami:v1.7.1
    labels:
      # Explicitly instruct Traefik to expose this service
      - traefik.enable=true
      # Router configuration
      ## Listen to the `web` entrypoint
      - traefik.http.routers.whoami_route.entrypoints=web
      ## Rule based on the Host of the request
      - traefik.http.routers.whoami_route.rule=Host(`whoami.karvounis.tutorial`)
      - traefik.http.routers.whoami_route.service=whoami_service
      # Service configuration
      ## 80 is the port that the whoami container is listening to
      - traefik.http.services.whoami_service.loadbalancer.server.port=80
    networks:
      - traefik_public

  # https://github.com/Tecnativa/docker-socket-proxy
  # Security-enhanced proxy for the Docker Socket
  socket_proxy:
    image: tecnativa/docker-socket-proxy:latest
    restart: unless-stopped
    environment:
      NETWORKS: 1
      SERVICES: 1
      CONTAINERS: 1
      TASKS: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - socket_proxy

networks:
  traefik_public:
    external: true
  socket_proxy:
    external: true
